V// source: plugin/firmware_check/js/firmware_check.js\u000a$(function() {\u000a    function FirmwareCheckViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.printerState = parameters[1];\u000a        self.access = parameters[2];\u000a\u000a        self.warnings = ko.observableArray([]);\u000a\u000a        self.requestData = function() {\u000a            if (!self.loginState.hasPermission(self.access.permissions.PLUGIN_FIRMWARE_CHECK_DISPLAY)) {\u000a                self.warnings([]);\u000a                return;\u000a            }\u000a\u000a            OctoPrint.plugins.firmware_check.get()\u000a                .done(self.fromResponse)\u000a                .fail(function() {\u000a                    self.warnings([]);\u000a                });\u000a        };\u000a\u000a        self.fromResponse = function(data) {\u000a            var warnings = [];\u000a            _.each(data, function(data, warning_type) {\u000a                warnings.push({\u000a                    type: warning_type,\u000a                    message: gettext(data.message),\u000a                    severity: data.severity,\u000a                    url: data.url\u000a                });\u000a            });\u000a            self.warnings(warnings);\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin !== "firmware_check") return;\u000a            if (!data.hasOwnProperty("type")) return;\u000a\u000a            if (data.type === "update") {\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self.cssClass = function(data) {\u000a            if (data.severity) {\u000a                return "firmware_check_warning_" + data.severity;\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self.warningText = function(data) {\u000a            switch (data.type) {\u000a                case "firmware-unsafe": return gettext("Critical Warning: Firmware Unsafe");\u000a                case "firmware-broken": return gettext("Warning: Firmware Broken");\u000a                default: return (data.severity === "critical") ? gettext("Critical Warning") : gettext("Warning");\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: FirmwareCheckViewModel,\u000a        dependencies: ["loginStateViewModel", "printerStateViewModel", "accessViewModel"],\u000a        elements: ["#sidebar_plugin_firmware_check_wrapper"]\u000a    });\u000a});\u000a\u000a\u000a;\u000a
p0
.